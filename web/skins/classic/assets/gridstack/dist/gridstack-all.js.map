{"version":3,"file":"gridstack-all.js","mappings":"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","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/runtime/define property getters","webpack://GridStack/webpack/runtime/hasOwnProperty shorthand","webpack://GridStack/./src/utils.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/dd-gridstack.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * utils.ts 11.1.2\r\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\nexport interface DragTransform {\r\n  xScale: number;\r\n  yScale: number;\r\n  xOffset: number;\r\n  yOffset: number;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  const wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  const oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\r\n  static getElements(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n\r\n      // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\r\n      // so if we start with a number, assume it's an id and just return that one item...\r\n      // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        const el = doc.getElementById(els);\r\n        return el ? [el] : [];\r\n      }\r\n\r\n      let list = root.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = root.querySelectorAll('.' + els);\r\n        if (!list.length) { list = root.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\r\n  static getElement(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n      if (!els.length) return null;\r\n      if (doc && els[0] === '#') {\r\n        return doc.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\r\n        return root.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        return doc.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id, then class\r\n      let el = root.querySelector(els);\r\n      if (doc && !el) { el = doc.getElementById(els) }\r\n      if (!el) { el = root.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** create the default grid item divs, and content possibly lazy loaded calling GridStack.renderCB */\r\n  static createWidgetDivs(itemClass: string, n: GridStackNode): HTMLElement {\r\n    const el = Utils.createDiv(['grid-stack-item', itemClass]);\r\n    const cont = Utils.createDiv(['grid-stack-item-content'], el);\r\n\r\n    const lazyLoad = n.lazyLoad || n.grid?.opts?.lazyLoad && n.lazyLoad !== false;\r\n    if (lazyLoad) {\r\n      if (!n.visibleObservable) {\r\n        n.visibleObservable = new IntersectionObserver(([entry]) => { if (entry.isIntersecting) {\r\n          n.visibleObservable?.disconnect();\r\n          delete n.visibleObservable;\r\n          GridStack.renderCB(cont, n)\r\n        }});\r\n        window.setTimeout(() => n.visibleObservable?.observe(el)); // wait until callee sets position attributes\r\n      }\r\n    } else GridStack.renderCB(cont, n);\r\n\r\n    return el;\r\n  }\r\n\r\n  /** create a div with the given classes */\r\n  static createDiv(classes: string[], parent?: HTMLElement): HTMLElement {\r\n    const el = document.createElement('div');\r\n    classes.forEach(c => {if (c) el.classList.add(c)});\r\n    parent?.appendChild(el);\r\n    return el;\r\n  }\r\n\r\n  /** true if we should resize to content. strict=true when only 'sizeToContent:true' and not a number which lets user adjust */\r\n  static shouldSizeToContent(n: GridStackNode | undefined, strict = false): boolean {\r\n    return n?.grid && (strict ?\r\n      (n.sizeToContent === true || (n.grid.opts.sizeToContent === true && n.sizeToContent === undefined)) :\r\n      (!!n.sizeToContent || (n.grid.opts.sizeToContent && n.sizeToContent !== false)));\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    const x0 = (a.x > b.x) ? a.x : b.x;\r\n    const x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    const y0 = (a.y > b.y) ? a.y : b.y;\r\n    const y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for ascending, -1 for descending (optional)\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir: 1 | -1 = 1): GridStackNode[] {\r\n    const und = 10000;\r\n    return nodes.sort((a, b) => {\r\n      const diffY = dir * ((a.y ?? und) - (b.y ?? und));\r\n      if (diffY === 0) return dir * ((a.x ?? und) - (b.x ?? und));\r\n      return diffY;\r\n    });\r\n  }\r\n\r\n  /** find an item by id */\r\n  static find(nodes: GridStackNode[], id: string): GridStackNode | undefined {\r\n    return id ? nodes.find(n => n.id === id) : undefined;\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    const style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string, parent?: HTMLElement): void {\r\n    const target = parent || document;\r\n    const el = target.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      if (val === 'auto' || val === '') h = 0;\r\n      else {\r\n        const match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%|cm|mm)?$/);\r\n        if (!match) {\r\n          throw new Error(`Invalid height val = ${val}`);\r\n        }\r\n        unit = match[2] || 'px';\r\n        h = parseFloat(match[1]);\r\n      }\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    if (b.x !== undefined) a.x = b.x;\r\n    if (b.y !== undefined) a.y = b.y;\r\n    if (b.w !== undefined) a.w = b.w;\r\n    if (b.h !== undefined) a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && (a.w || 1) === (b.w || 1) && (a.h || 1) === (b.h || 1);\r\n  }\r\n\r\n  /** given a node, makes sure it's min/max are valid */\r\n  static sanitizeMinMax(node: GridStackNode) {\r\n    // remove 0, undefine, null\r\n    if (!node.minW) { delete node.minW; }\r\n    if (!node.minH) { delete node.minH; }\r\n    if (!node.maxW) { delete node.maxW; }\r\n    if (!node.maxH) { delete node.maxH; }\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      const aVal = a[key];\r\n      const bVal = b[key];\r\n      if (key[0] === '_' || aVal === bVal) {\r\n        delete a[key]\r\n      } else if (aVal && typeof aVal === 'object' && bVal !== undefined) {\r\n        Utils.removeInternalAndSame(aVal, bVal);\r\n        if (!Object.keys(aVal).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n  //   while (el) {\r\n  //     if (el.classList.contains(name)) return el;\r\n  //     el = el.parentElement\r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    const style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    const rect = el.getBoundingClientRect();\r\n    const innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      const offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      const offsetDiffUp = rect.top;\r\n      const scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        const prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = Utils.getElement(parent);\r\n    } else {\r\n      parentNode = parent;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /**\r\n   * defines an element that is used to get the offset and scale from grid transforms\r\n   * returns the scale and offsets from said element\r\n  */\r\n  public static getValuesFromTransformedElement(parent: HTMLElement): DragTransform {\r\n    const transformReference = document.createElement('div');\r\n    Utils.addElStyles(transformReference, {\r\n      opacity: '0',\r\n      position: 'fixed',\r\n      top: 0 + 'px',\r\n      left: 0 + 'px',\r\n      width: '1px',\r\n      height: '1px',\r\n      zIndex: '-999999',\r\n    });\r\n    parent.appendChild(transformReference);\r\n    const transformValues = transformReference.getBoundingClientRect();\r\n    parent.removeChild(transformReference);\r\n    transformReference.remove();\r\n    return {\r\n      xScale: 1 / transformValues.width,\r\n      yScale: 1 / transformValues.height,\r\n      xOffset: transformValues.left,\r\n      yOffset: transformValues.top,\r\n    }\r\n  }\r\n\r\n  /** swap the given object 2 field values */\r\n  public static swap(o: unknown, a: string, b: string): void {\r\n    if (!o) return;\r\n    const tmp = o[a]; o[a] = o[b]; o[b] = tmp;\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   const target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n\r\n  /** true if the item can be rotated (checking for prop, not space available) */\r\n  public static canBeRotated(n: GridStackNode): boolean {\r\n    return !(!n || n.w === n.h || n.locked || n.noResize || n.grid?.opts.disableResize || (n.minW && n.minW === n.maxW) || (n.minH && n.minH === n.maxH));\r\n  }\r\n}","/**\n * gridstack-engine.ts 11.1.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, SaveFcn, CompactOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  public defaultColumn = 12;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal set during loading (which is sorted) so item gets added AFTER collision nodes */\n  public _loading?: boolean\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize?: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter */\n  public static _idSeq = 0;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || this.defaultColumn;\n    if (this.column > this.defaultColumn) this.defaultColumn = this.column;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true, doPack = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.cleanNodes();\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      if (doPack) this._packNodes();\n      this._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (!this._loading && this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    const newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    let counter = 0;\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      if (counter++ > this.nodes.length * 2) {\n        throw new Error(\"Infinite collide check\");\n      }\n      let moved: boolean;\n      // if colliding with a locked item OR loading (move after) OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || this._loading || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        const newNN = {...nn, y: collide.y + collide.h, ...newOpt};\n        // pretent we moved to where we are now so we can continue any collision checks #2492\n        moved = this._loading && Utils.samePos(node, newNN) ? true : this.moveNode(node, newNN);\n\n        if ((collide.locked || this._loading) && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n\n      if (!moved) return didMove; // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode | undefined {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode | undefined {\n    if (!o.rect || !node._rect) return;\n    const r0 = node._rect; // where started\n    const r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    let overMax = 0.5; // need >50%\n    for (let n of collides) {\n      if (n.locked || !n._rect) {\n        break;\n      }\n      const r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y + r0.h > r2.y + r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x + r0.w > r2.x + r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      const over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    }\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    const collide: GridStackNode;\n    const overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      const over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean | undefined {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      const x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { const t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { const t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    const nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    if (doSort) this.sortNodes();\n    const wasBatch = this.batchMode;\n    if (!wasBatch) this.batchUpdate();\n    const wasColumnResize = this._inColumnResize;\n    if (!wasColumnResize) this._inColumnResize = true; // faster addNode()\n    const copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach((n, index, list) => {\n      let after: GridStackNode;\n      if (!n.locked) {\n        n.autoPosition = true;\n        if (layout === 'list' && index) after = list[index - 1];\n      }\n      this.addNode(n, false, after); // 'false' for add event trigger\n    });\n    if (!wasColumnResize) delete this._inColumnResize;\n    if (!wasBatch) this.batchUpdate(false);\n    return this;\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir: 1 | -1 = 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          const collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          const newY = i === 0 ? 0 : n.y - 1;\n          const canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node._id = node._id ?? GridStackEngine._idSeq++;\n\n    // make sure USER supplied id are unique in our list, else assign a new one as it will create issues during load/update/etc...\n    const id = node.id;\n    if (id) {\n      let count = 1; // append nice _n rather than some random number\n      while (this.nodes.find(n => n.id === node.id && n !== node)) {\n        node.id = id + '_' + (count++);\n      }\n    }\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    const defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n    Utils.sanitizeMinMax(node);\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') { node.x = Number(node.x); }\n    if (typeof node.y == 'string') { node.y = Number(node.y); }\n    if (typeof node.w == 'string') { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x)) { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y)) { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w)) { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    this.nodeBoundFix(node, resizing);\n    return node;\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackEngine {\n\n    const before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW && node.w) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH && node.h) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.w && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH && node.h) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns,\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n    if (saveOrig && this.column < this.defaultColumn && !this._inColumnResize && node._id && this.findCacheLayout(node, this.defaultColumn) === -1) {\n      const copy = {...node}; // need _id + positions\n      if (copy.autoPosition || copy.x === undefined) { delete copy.x; delete copy.y; }\n      else copy.x = Math.min(this.defaultColumn - 1, copy.x);\n      copy.w = Math.min(this.defaultColumn, copy.w || 1);\n      this.cacheOneLayout(copy, this.defaultColumn);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return this;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    const dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n   * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n   */\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column, after?: GridStackNode): boolean {\n    const start = after ? after.y * column + (after.x + after.w) : 0;\n    let found = false;\n    for (let i = start; !found; ++i) {\n      const x = i % column;\n      const y = Math.floor(i / column);\n      if (x + node.w > column) {\n        continue;\n      }\n      const box = {x, y, w: node.w, h: node.h};\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n        if (node.x !== x || node.y !== y) node._dirty = true;\n        node.x = x;\n        node.y = y;\n        delete node.autoPosition;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false, after?: GridStackNode): GridStackNode {\n    const dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    let skipCollision: boolean;\n    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n      delete node.autoPosition; // found our slot\n      skipCollision = true;\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    if (!skipCollision) this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n._id === node._id)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n._id !== node._id);\n    if (!node._isAboutToRemove) this._packNodes(); // if dragged out, no need to relayout as already done...\n    this._notify([node]);\n    return this;\n  }\n\n  public removeAll(removeDOM = true, triggerEvent = true): GridStackEngine {\n    delete this._layouts;\n    if (!this.nodes.length) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    const removedNodes = this.nodes;\n    this.removedNodes = triggerEvent ? removedNodes : [];\n    this.nodes = [];\n    return this._notify(removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    const clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n._id === node._id) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n    // (case where widget was somehow added past our max #2449)\n    const canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      const collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      const n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    const clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    const n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined && !this.batchMode) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    const resizing = (node.w !== o.w || node.h !== o.h);\n    const nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (!o.forceCollide && Utils.samePos(node, o)) return false;\n    const prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    const collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      const activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        const over = Utils.areaIntercept(o.rect, collide._rect);\n        const a1 = Utils.area(o.rect);\n        const a2 = Utils.area(collide._rect);\n        const perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove && !Utils.samePos(node, nn)) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    const n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true, saveCB?: SaveFcn): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    const len = this._layouts?.length;\n    const layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    const list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      const wl = layout?.find(l => l._id === n._id);\n      // use layout info fields instead if set\n      const w: GridStackNode = {...n, ...(wl || {})};\n      Utils.removeInternalForSave(w, !saveElement);\n      if (saveCB) saveCB(n, w);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        const ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          const n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (n.y >= 0 && node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public columnChanged(prevColumn: number, column: number, layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // in this mode no layout is done whatsoever, up to the caller to handle it\n    if (layout === 'none') return this;\n\n    // simpler shortcuts layouts\n    const doCompact = layout === 'compact' || layout === 'list';\n    if (doCompact) {\n      this.sortNodes(1); // sort with original layout once and only once (new column will affect order otherwise)\n    }\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n    if (column < prevColumn) this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n    let nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1); // current column reverse sorting so we can insert last to front (limit collision)\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    if (column > prevColumn && this._layouts) {\n      const cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      const lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          const n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            if (!doCompact && !cacheNode.autoPosition) {\n              n.x = cacheNode.x ?? n.x;\n              n.y = cacheNode.y ?? n.y;\n            }\n            n.w = cacheNode.w ?? n.w;\n            if (cacheNode.x == undefined || cacheNode.y === undefined) n.autoPosition = true;\n          }\n        });\n      }\n\n      // if we found cache re-use those nodes that are still current\n      cacheNodes.forEach(cacheNode => {\n        const j = nodes.findIndex(n => n._id === cacheNode._id);\n        if (j !== -1) {\n          const n = nodes[j];\n          // still current, use cache info positions\n          if (doCompact) {\n            n.w = cacheNode.w; // only w is used, and don't trim the list\n            return;\n          }\n          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n            this.findEmptyPosition(cacheNode, newNodes);\n          }\n          if (!cacheNode.autoPosition) {\n            n.x = cacheNode.x ?? n.x;\n            n.y = cacheNode.y ?? n.y;\n            n.w = cacheNode.w ?? n.w;\n            newNodes.push(n);\n          }\n          nodes.splice(j, 1);\n        }\n      });\n    }\n\n    // much simpler layout that just compacts\n    if (doCompact) {\n      this.compact(layout, false);\n    } else {\n      // ...and add any extra non-cached ones\n      if (nodes.length) {\n        if (typeof layout === 'function') {\n          layout(column, prevColumn, newNodes, nodes);\n        } else {\n          const ratio = doCompact ? 1 : column / prevColumn;\n          const move = (layout === 'move' || layout === 'moveScale');\n          const scale = (layout === 'scale' || layout === 'moveScale');\n          nodes.forEach(node => {\n            // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n            node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n            node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n            newNodes.push(node);\n          });\n          nodes = [];\n        }\n      }\n\n      // finally re-layout them in reverse order (to get correct placement)\n      newNodes = Utils.sort(newNodes, -1);\n      this._inColumnResize = true; // prevent cache update\n      this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n      newNodes.forEach(node => {\n        this.addNode(node, false); // 'false' for add event trigger\n        delete node._orig; // make sure the commit doesn't try to restore things back to original\n      });\n    }\n\n    this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n    this.batchUpdate(false, !doCompact);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    const copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      // make sure we have an id in case this is new layout, else re-use id already set\n      if (n._id === undefined) {\n        const existing = n.id ? this.nodes.find(n2 => n2.id === n.id) : undefined; // find existing node using users id\n        n._id = existing?._id ?? GridStackEngine._idSeq++;\n      }\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id ?? GridStackEngine._idSeq++;\n    const l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    if (n.autoPosition || n.x === undefined) { delete l.x; delete l.y; if (n.autoPosition) l.autoPosition = true; }\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    const index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(l);\n    else\n      this._layouts[column][index] = l;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number | undefined {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n  public removeNodeFromLayoutCache(n: GridStackNode) {\n    if (!this._layouts) {\n      return;\n    }\n    for (let i = 0; i < this._layouts.length; i++) {\n      const index = this.findCacheLayout(n, i);\n      if (index !== -1) {\n        this._layouts[i].splice(index, 1);\n      }\n    }\n  }\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (const prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/**\r\n * types.ts 11.1.2\r\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable'},\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n  //removable\r\n};\r\n\r\n/**\r\n * different layout options when changing # of columns, including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n * Options are:\r\n * 'list' - treat items as sorted list, keeping items (un-sized unless too big for column count) sequentially reflowing them\r\n * 'compact' - similar to list, but using compact() method which will possibly re-order items if an empty slots are available due to a larger item needing to be pushed to next row\r\n * 'moveScale' - will scale and move items by the ratio new newColumnCount / oldColumnCount\r\n * 'move' | 'scale' - will only size or move items\r\n * 'none' will leave items unchanged, unless they don't fit in column count\r\n */\r\nexport type ColumnOptions = 'list' | 'compact' | 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\nexport type CompactOptions = 'list' | 'compact';\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/** optional function called during save() to let the caller add additional custom data to the GridStackWidget structure that will get returned */\r\nexport type SaveFcn = (node: GridStackNode, w: GridStackWidget) => void;\r\n\r\n/** optional function called during load()/addWidget() to let the caller create custom content other than plan text */\r\nexport type RenderFcn = (el: HTMLElement, w: GridStackWidget) => void;\r\n\r\nexport type ResizeToContentFcn = (el: GridItemHTMLElement) => void;\r\n\r\n/** describes the responsive nature of the grid. NOTE: make sure to have correct extra CSS to support this. */\r\nexport interface Responsive {\r\n  /** wanted width to maintain (+-50%) to dynamically pick a column count. NOTE: make sure to have correct extra CSS to support this. */\r\n  columnWidth?: number;\r\n  /** maximum number of columns allowed (default: 12). NOTE: make sure to have correct extra CSS to support this. */\r\n  columnMax?: number;\r\n  /** explicit width:column breakpoints instead of automatic 'columnWidth'. NOTE: make sure to have correct extra CSS to support this. */\r\n  breakpoints?: Breakpoint[];\r\n  /** specify if breakpoints are for window size or grid size (default:false = grid) */\r\n  breakpointForWindow?: boolean;\r\n  /** global re-layout mode when changing columns */\r\n  layout?: ColumnOptions;\r\n}\r\n\r\nexport interface Breakpoint {\r\n  /** <= width for the breakpoint to trigger */\r\n  w?: number;\r\n  /** column count */\r\n  c: number;\r\n  /** re-layout mode if different from global one */\r\n  layout?: ColumnOptions;\r\n  /** TODO: children layout, which spells out exact locations and could omit/add some children */\r\n  // children?: GridStackWidget[];\r\n}\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't work right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** responsive column layout for width:column behavior */\r\n  columnOpts?: Responsive;\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /** re-layout mode when we're a subgrid and we are being resized. default to 'list' */\r\n  layout?: ColumnOptions;\r\n\r\n  /** true when widgets are only created when they scroll into view (visible) */\r\n  lazyLoad?: boolean;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/right-to-left(rtl).html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /** set to true if all grid items (by default, but item can also override) height should be based on content size instead of WidgetItem.h to avoid v-scrollbars.\r\n   * Note: this is still row based, not pixels, so it will use ceil(getBoundingClientRect().height / getCellHeight())\r\n   */\r\n  sizeToContent?: boolean;\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us (inside our grid-items) */\r\n  subGridOpts?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n  /** for collision check even if we don't move */\r\n  forceCollide?: boolean;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent direct resizing by the user (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents direct moving by the user (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** same as noMove+noResize but also prevents being pushed by other widgets or api (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: string;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** true when widgets are only created when they scroll into view (visible) */\r\n  lazyLoad?: boolean;\r\n  /** local (vs grid) override - see GridStackOptions.\r\n   * Note: This also allow you to set a maximum h value (but user changeable during normal resizing) to prevent unlimited content from taking too much space (get scrollbar) */\r\n  sizeToContent?: boolean | number;\r\n  /** local override of GridStack.resizeToContentParent that specify the class to use for the parent (actual) vs child (wanted) height */\r\n  resizeToContentParent?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime to get options from */\r\n  subGridOpts?: GridStackOptions;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: opts.itemClass) */\r\n  accept?: string;\r\n  /** class that cannot be removed (default: 'grid-stack-non-removable') */\r\n  decline?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** prevents dragging from starting on specified elements, listed as comma separated selectors (eg: '.no-drag'). default built in is 'input,textarea,button,select,option' */\r\n  cancel?: string;\r\n  /** helper function when dropping: 'clone' or your own method */\r\n  helper?: 'clone' | ((el: HTMLElement) => HTMLElement);\r\n  /** callbacks */\r\n  start?: (event: Event, ui: DDUIData) => void;\r\n  stop?: (event: Event) => void;\r\n  drag?: (event: Event, ui: DDUIData) => void;\r\n}\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal runtime descriptions describing the widgets in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to parent Grid instance */\r\n  grid?: GridStack;\r\n  /** actual sub-grid instance */\r\n  subGrid?: GridStack;\r\n  /** allow delay creation when visible */\r\n  visibleObservable?: IntersectionObserver;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal does the node attr ned to be updated due to changed x,y,w,h values */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal had drag&drop been initialized */\r\n  _initDD?: boolean;\r\n}\r\n","/**\n * dd-manager.ts 11.1.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * touch.ts 11.1.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  // console.log(\"pointer down\")\n  if (e.pointerType === 'mouse') return;\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  if (e.pointerType === 'mouse') return;\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  if (e.pointerType === 'mouse') return;\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * dd-resizable-handle.ts 11.1.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\nimport { GridItemHTMLElement } from './gridstack';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(protected host: GridItemHTMLElement, protected dir: string, protected option: DDResizableHandleOpt) {\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this._keyEvent = this._keyEvent.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = this.el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, { capture: true, passive: true}); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    const s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n      // now track keyboard events to cancel\n      document.addEventListener('keydown', this._keyEvent);\n    }\n    e.stopPropagation();\n    // e.preventDefault(); passive = true\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n      document.removeEventListener('keydown', this._keyEvent);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal call when keys are being pressed - use Esc to cancel */\n  protected _keyEvent(e: KeyboardEvent): void {\n    if (e.key === 'Escape') {\n      this.host.gridstackNode?.grid?.engine.restoreInitial();\n      this._mouseUp(this.mouseDownEvent);\n    }\n  }\n\n\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-base-impl.ts 11.1.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-resizable.ts 11.1.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, GridItemHTMLElement, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxHeightMoveUp?: number;\n  maxWidth?: number;\n  maxWidthMoveLeft?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface RectScaleReciprocal {\n  x: number;\n  y: number;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected rectScale: RectScaleReciprocal = { x: 1, y: 1 };\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n  /** @internal */\n  protected sizeToContent: boolean;\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  constructor(public el: GridItemHTMLElement, public option: DDResizableOpt = {}) {\n    super();\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    const updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    const updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOver(e: Event): void {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOut(e: Event): void {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    this.handlers = this.option.handles.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.sizeToContent = Utils.shouldSizeToContent(this.el.gridstackNode, true); // strick true only and not number\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n\n    const parent = this.el.parentElement;\n    const dragTransform = Utils.getValuesFromTransformedElement(parent);\n    this.rectScale = {\n      x: dragTransform.xScale,\n      y: dragTransform.yScale\n    };\n\n    if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = this.sizeToContent ? 0 : event.clientY - oEvent.clientY; // prevent vert resize\n    let moveLeft: boolean;\n    let moveUp: boolean;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n      moveLeft = true;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n      moveUp = true;\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height, moveLeft, moveUp);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number, moveLeft: boolean, moveUp: boolean): Size {\n    const o = this.option;\n    const maxWidth = (moveLeft ? o.maxWidthMoveLeft : o.maxWidth) || Number.MAX_SAFE_INTEGER;\n    const minWidth = o.minWidth / this.rectScale.x || oWidth;\n    const maxHeight = (moveUp ? o.maxHeightMoveUp : o.maxHeight) || Number.MAX_SAFE_INTEGER;\n    const minHeight = o.minHeight / this.rectScale.y || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      const scaleReciprocal = key === 'width' || key === 'left' ? this.rectScale.x : key === 'height' || key === 'top' ? this.rectScale.y : 1;\n      this.el.style[key] = (value - containmentRect[key]) * scaleReciprocal + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: (rect.left - containmentRect.left) * this.rectScale.x,\n        top: (rect.top - containmentRect.top) * this.rectScale.y\n      },\n      size: {\n        width: rect.width * this.rectScale.x,\n        height: rect.height * this.rectScale.y\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * dd-draggable.ts 11.1.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DragTransform, Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData, GridStackNode, GridStackPosition, DDDragOpt } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ninterface GridStackNodeRotate extends GridStackNode {\n  _origRotate?: GridStackPosition;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDragOpt> {\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEls: HTMLElement[];\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal last drag event */\n  protected lastDrag: DragEvent;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['width', 'height', 'transform', 'transform-origin', 'transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n  /** @internal */\n  protected dragTransform: DragTransform = {\n    xScale: 1,\n    yScale: 1,\n    xOffset: 0,\n    yOffset: 0\n  };\n\n  constructor(public el: GridItemHTMLElement, public option: DDDragOpt = {}) {\n    super();\n\n    // get the element that is actually supposed to be dragged by\n    const handleName = option?.handle?.substring(1);\n    const n = el.gridstackNode;\n    this.dragEls = !handleName || el.classList.contains(handleName) ? [el] : (n?.subGrid ? [el.querySelector(option.handle) || el] : Array.from(el.querySelectorAll(option.handle)));\n    if (this.dragEls.length === 0) {\n      this.dragEls = [el];\n    }\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this._keyEvent = this._keyEvent.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEls.forEach(dragEl => {\n      dragEl.addEventListener('mousedown', this._mouseDown);\n      if (isTouch) {\n        dragEl.addEventListener('touchstart', touchstart);\n        dragEl.addEventListener('pointerdown', pointerdown);\n        // dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n      }\n    });\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEls.forEach(dragEl => {\n      dragEl.removeEventListener('mousedown', this._mouseDown);\n      if (isTouch) {\n        dragEl.removeEventListener('touchstart', touchstart);\n        dragEl.removeEventListener('pointerdown', pointerdown);\n      }\n    });\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.mouseDownEvent) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDragOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n    if (!this.dragEls.find(el => el === e.target) && (e.target as HTMLElement).closest(skipMouseDown)) return true;\n    if (this.option.cancel) {\n      if ((e.target as HTMLElement).closest(this.option.cancel)) return true;\n    }\n\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, { capture: true, passive: true }); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      e.currentTarget.addEventListener('touchmove', touchmove);\n      e.currentTarget.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    // preventDefault() prevents blur event which occurs just after mousedown event.\n    // if an editable content has focus, then blur must be call\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\n\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent): void {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    const s = this.mouseDownEvent;\n    this.lastDrag = e;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      const grid = this.el.gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper();\n      this._setupHelperContainmentStyle();\n      this.dragTransform = Utils.getValuesFromTransformedElement(this.helperContainment);\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      this._setupHelperStyle(e);\n\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n      // now track keyboard events to cancel or rotate\n      document.addEventListener('keydown', this._keyEvent);\n    }\n    // e.preventDefault(); // passive = true. OLD: was needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch && e.currentTarget) { // destroy() during nested grid call us again wit fake _mouseUp\n      e.currentTarget.removeEventListener('touchmove', touchmove, true);\n      e.currentTarget.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n      delete (this.el.gridstackNode as GridStackNodeRotate)?._origRotate;\n      document.removeEventListener('keydown', this._keyEvent);\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper !== this.el) this.helper.remove(); // hide now\n      this._removeHelperStyle();\n\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal call when keys are being pressed - use Esc to cancel, R to rotate */\n  protected _keyEvent(e: KeyboardEvent): void {\n    const n = this.el.gridstackNode as GridStackNodeRotate;\n    if (!n?.grid) return;\n    const grid = n.grid;\n\n    if (e.key === 'Escape') {\n      if (n._origRotate) {\n        n._orig = n._origRotate;\n        delete n._origRotate;\n      }\n      grid.engine.restoreInitial();\n      this._mouseUp(this.mouseDownEvent);\n    } else if (e.key === 'r' || e.key === 'R') {\n      if (!Utils.canBeRotated(n)) return;\n      n._origRotate = n._origRotate || { ...n._orig }; // store the real orig size in case we Esc after doing rotation\n      delete n._moving; // force rotate to happen (move waits for >50% coverage otherwise)\n      grid.setAnimation(false) // immediate rotate so _getDragOffset() gets the right dom size below\n        .rotate(n.el, { top: -this.dragOffset.offsetTop, left: -this.dragOffset.offsetLeft })\n        .setAnimation();\n      n._moving = true;\n      this.dragOffset = this._getDragOffset(this.lastDrag, n.el, this.helperContainment);\n      this.helper.style.width = this.dragOffset.width + 'px';\n      this.helper.style.height = this.dragOffset.height + 'px';\n      Utils.swap(n._orig, 'w', 'h');\n      delete n._rect;\n      this._mouseMove(this.lastDrag);\n    }\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(this.el);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n    }\n    this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    const node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n      const helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n      const transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    const containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = (e.clientX + offset.offsetLeft - containmentRect.left) * this.dragTransform.xScale + 'px';\n    style.top = (e.clientY + offset.offsetTop - containmentRect.top) * this.dragTransform.yScale + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      xformOffsetX = this.dragTransform.xOffset;\n      xformOffsetY = this.dragTransform.yOffset;\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width * this.dragTransform.xScale,\n      height: targetOffset.height * this.dragTransform.yScale\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: (offset.top - containmentRect.top) * this.dragTransform.yScale,\n        left: (offset.left - containmentRect.left) * this.dragTransform.xScale\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 11.1.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n\n  constructor(public el: HTMLElement, public option: DDDroppableOpt = {}) {\n    super();\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent, true); // calledByEnter = true\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent, calledByEnter = false): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      if (!calledByEnter) {\n        let parentDrop: DDDroppable;\n        let parent: DDElementHost = this.el.parentElement;\n        while (!parentDrop && parent) {\n          parentDrop = parent.ddElement?.ddDroppable;\n          parent = parent.parentElement;\n        }\n        if (parentDrop) {\n          parentDrop._mouseEnter(e);\n        }\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.classList.contains(this.option.accept as string) || el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 11.1.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { DDDragOpt, GridItemHTMLElement } from './types';\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(public el: DDElementHost) {}\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDragOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 11.1.2\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2024  Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete, DragTransform } from './utils';\r\nimport {\r\n  gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragOpt, GridStackPosition, GridStackOptions,\r\n  GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn, SaveFcn, CompactOptions, GridStackMoveOpts, ResizeToContentFcn, GridStackDroppedHandler, GridStackElementHandler,\r\n  Position, RenderFcn\r\n} from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | 'resizecontent';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n// temporary legacy (<10.x) support\r\ninterface OldOneColumnOpts extends GridStackOptions {\r\n  /** disables the onColumnMode when the grid width is less (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n  /** set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false) */\r\n  oneColumnModeDomSort?: boolean;\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * const grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * const grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    if (typeof document === 'undefined') return null; // temp workaround SSR\r\n    const el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n          '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * const grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    const grids: GridStack[] = [];\r\n    if (typeof document === 'undefined') return grids; // temp workaround SSR\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    let el = parent as GridHTMLElement;\r\n    if (el.gridstack) {\r\n      // already a grid - set option and load data\r\n      const grid = el.gridstack;\r\n      if (opt) grid.opts = { ...grid.opts, ...opt };\r\n      if (opt.children !== undefined) grid.load(opt.children);\r\n      return grid;\r\n    }\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || GridStack.addRemoveCB) {\r\n      if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        el = Utils.createDiv(['grid-stack', opt.class], parent);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    const grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  public static addRemoveCB?: AddRemoveFcn;\r\n\r\n  /**\r\n   * callback during saving to application can inject extra data for each widget, on top of the grid layout properties\r\n   */\r\n  public static saveCB?: SaveFcn;\r\n\r\n  /**\r\n   * callback to create the content of widgets so the app can control how to store and restore it\r\n   * By default this lib will do 'el.textContent = w.content' forcing text only support for avoiding potential XSS issues.\r\n   */\r\n  public static renderCB?: RenderFcn = (el: HTMLElement, w: GridStackNode) => { if (el && w?.content) el.textContent = w.content; };\r\n\r\n  /** callback to use for resizeToContent instead of the built in one */\r\n  public static resizeToContentCB?: ResizeToContentFcn;\r\n  /** parent class for sizing content. defaults to '.grid-stack-item-content' */\r\n  public static resizeToContentParent = '.grid-stack-item-content';\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridNode?: GridStackNode;\r\n\r\n  /** time to wait for animation (if enabled) to be done so content sizing can happen */\r\n  public animationDelay = 300 + 10;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n  protected resizeObserver: ResizeObserver;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): GridItemHTMLElement {\r\n    if (!this._placeholder) {\r\n      const placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.textContent = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _sizeThrottle: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected prevWidth: number;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n  /** @internal meant to store the scale of the active grid */\r\n  protected dragTransform: DragTransform = { xScale: 1, yScale: 1, xOffset: 0, yOffset: 0 };\r\n  private _skipInitialResize: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el the HTML element tied to this grid after it's been initialized\r\n   * @param opts grid options - public for classes to access, but use methods to modify!\r\n   */\r\n  public constructor(public el: GridHTMLElement, public opts: GridStackOptions = {}) {\r\n    el.gridstack = this;\r\n    this.opts = opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    const rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n    let bk = opts.columnOpts?.breakpoints;\r\n    // LEGACY: oneColumnMode stuff changed in v10.x - check if user explicitly set something to convert over\r\n    const oldOpts: OldOneColumnOpts = opts;\r\n    if (oldOpts.oneColumnModeDomSort) {\r\n      delete oldOpts.oneColumnModeDomSort;\r\n      console.log('warning: Gridstack oneColumnModeDomSort no longer supported. Use GridStackOptions.columnOpts instead.')\r\n    }\r\n    if (oldOpts.oneColumnSize || oldOpts.disableOneColumnMode === false) {\r\n      const oneSize = oldOpts.oneColumnSize || 768;\r\n      delete oldOpts.oneColumnSize;\r\n      delete oldOpts.disableOneColumnMode;\r\n      opts.columnOpts = opts.columnOpts || {};\r\n      bk = opts.columnOpts.breakpoints = opts.columnOpts.breakpoints || [];\r\n      let oneColumn = bk.find(b => b.c === 1);\r\n      if (!oneColumn) {\r\n        oneColumn = { c: 1, w: oneSize };\r\n        bk.push(oneColumn, { c: 12, w: oneSize + 1 });\r\n      } else oneColumn.w = oneSize;\r\n    }\r\n    //...end LEGACY\r\n    // cleanup responsive opts (must have columnWidth | breakpoints) then sort breakpoints by size (so we can match during resize)\r\n    const resp = opts.columnOpts;\r\n    if (resp) {\r\n      if (!resp.columnWidth && !resp.breakpoints?.length) {\r\n        delete opts.columnOpts;\r\n        bk = undefined;\r\n      } else {\r\n        resp.columnMax = resp.columnMax || 12;\r\n      }\r\n    }\r\n    if (bk?.length > 1) bk.sort((a, b) => (b.w || 0) - (a.w || 0));\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    const defaults: GridStackOptions = {\r\n      ...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      sizeToContent: Utils.toBool(el.getAttribute('gs-size-to-content')) || undefined,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass || gridDefaults.removableOptions.accept,\r\n        decline: gridDefaults.removableOptions.decline\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    opts = Utils.defaults(opts, defaults);\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    this.checkDynamicColumn();\r\n    this.el.classList.add('gs-' + opts.column);\r\n\r\n    if (opts.rtl === 'auto') {\r\n      opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    const parentGridItem: GridItemHTMLElement = this.el.closest('.' + gridDefaults.itemClass);\r\n    const parentNode = parentGridItem?.gridstackNode;\r\n    if (parentNode) {\r\n      parentNode.subGrid = this;\r\n      this.parentGridNode = parentNode;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentNode.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof opts.cellHeight == 'number' && opts.cellHeightUnit && opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        opts.cellHeight = opts.cellHeight + opts.cellHeightUnit;\r\n        delete opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (opts.alwaysShowResizeHandle === 'mobile') {\r\n      opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'gs-id-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    const engineClass = opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: opts.float,\r\n      maxRow: opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          const el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    // create initial global styles BEFORE loading children so resizeToContent margin can be calculated correctly\r\n    this._updateStyles(false, 0);\r\n\r\n    if (opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.engine._loading = true; // loading collision check\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      delete this.engine._loading;\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (opts.children) {\r\n      const children = opts.children;\r\n      delete opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    // if (this.engine.nodes.length) this._updateStyles(); // update based on # of children. done in engine onChange CB\r\n    this.setAnimation();\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (opts.draggable?.pause !== undefined) DDManager.pauseDrag = opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget(el)` for DOM element.\r\n   *\r\n   * @example\r\n   * const grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   *\r\n   * @param w GridStackWidget definition. used MakeWidget(el) if you have dom element instead.\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(w: GridStackWidget): GridItemHTMLElement {\r\n    if (typeof w === 'string') { console.error('V11: GridStack.addWidget() does not support string anymore. see #2736'); return; }\r\n    if ((w as HTMLElement).ELEMENT_NODE) { console.error('V11: GridStack.addWidget() does not support HTMLElement anymore. use makeWidget()'); return this.makeWidget(w as HTMLElement); }\r\n\r\n    let el: GridItemHTMLElement;\r\n    let node: GridStackNode = w;\r\n    node.grid = this;\r\n    if (node?.el) {\r\n      el = node.el; // re-use element stored in the node\r\n    } else if (GridStack.addRemoveCB) {\r\n      el = GridStack.addRemoveCB(this.el, w, true, false);\r\n    } else {\r\n      el = Utils.createWidgetDivs(this.opts.itemClass, node);\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\r\n    node = el.gridstackNode;\r\n    if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id)) return el;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    const domAttr = this._readAttr(el);\r\n    Utils.defaults(w, domAttr);\r\n    this.engine.prepareNode(w);\r\n    // this._writeAttr(el, w); why write possibly incorrect values back when makeWidget() will ?\r\n\r\n    this.el.appendChild(el);\r\n\r\n    this.makeWidget(el, w);\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @param saveContent if true (default) the html inside .grid-stack-content will be saved to child widget\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if (node.subGrid?.el) return node.subGrid; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGridOpts;\r\n      grid = grid.parentGridNode?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({\r\n      // by default sub-grid inherit from us | parent, other than id, children, etc...\r\n      ...this.opts, id: undefined, children: undefined, column: 'auto', columnOpts: undefined, layout: 'list', subGridOpts: undefined,\r\n      ...(subGridTemplate || {}),\r\n      ...(ops || node.subGridOpts || {})\r\n    });\r\n    node.subGridOpts = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      delete ops.columnOpts; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = { ...node, x: 0, y: 0 };\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGridOpts;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (GridStack.addRemoveCB) {\r\n        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        newItem = Utils.createDiv(['grid-stack-item']);\r\n        newItem.appendChild(content);\r\n        content = Utils.createDiv(['grid-stack-item-content'], node.el);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      const w = autoColumn ? ops.column : node.w;\r\n      const h = node.h + nodeToAdd.h;\r\n      const style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, { w, h });\r\n      setTimeout(() => style.transition = null); // recover animation\r\n    }\r\n\r\n    const subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.makeWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.makeWidget(node.el, node);\r\n      }\r\n    }\r\n\r\n    // if sizedToContent, we need to re-calc the size of ourself\r\n    this.resizeToContentCheck(false, node);\r\n\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    const pGrid = this.parentGridNode?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridNode.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridNode.x;\r\n      n.y += this.parentGridNode.y;\r\n      pGrid.makeWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridNode) delete this.parentGridNode.subGrid;\r\n    delete this.parentGridNode;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB): GridStackWidget[] | GridStackOptions {\r\n    // return copied GridStackWidget (with optionally .el) we can modify at will...\r\n    const list = this.engine.save(saveContent, saveCB);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\r\n        const itemContent = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = itemContent?.innerHTML;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent && !saveCB) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid?.el) {\r\n          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\r\n          n.subGridOpts = (saveGridOpt ? listOrOpt : { children: listOrOpt }) as GridStackOptions;\r\n          delete n.subGrid;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      const o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   */\r\n  public load(items: GridStackWidget[], addRemove: boolean | AddRemoveFcn = GridStack.addRemoveCB || true): GridStack {\r\n    items = Utils.cloneDeep(items); // so we can mod\r\n    const column = this.getColumn();\r\n\r\n    // make sure size 1x1 (default) is present as it may need to override current sizes\r\n    items.forEach(n => { n.w = n.w || 1; n.h = n.h || 1 });\r\n\r\n    // sort items. those without coord will be appended last\r\n    items = Utils.sort(items);\r\n\r\n    // if we're loading a layout into for example 1 column and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    let maxColumn = 0;\r\n    items.forEach(n => { maxColumn = Math.max(maxColumn, (n.x || 0) + n.w) });\r\n    if (maxColumn > this.engine.defaultColumn) this.engine.defaultColumn = maxColumn;\r\n    if (maxColumn > column) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, maxColumn, true);\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option so creating will use it\r\n    const prevCB = GridStack.addRemoveCB;\r\n    if (typeof (addRemove) === 'function') GridStack.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    const removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // if we are loading from empty temporarily remove animation\r\n    const blank = !this.engine.nodes.length;\r\n    if (blank) this.setAnimation(false);\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (!blank && addRemove) {\r\n      const copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        if (!n.id) return;\r\n        const item = Utils.find(items, n.id);\r\n        if (!item) {\r\n          if (GridStack.addRemoveCB) GridStack.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets - starting with removing items in the new layout we will reposition\r\n    // to reduce collision and add no-coord ones at next available spot\r\n    this.engine._loading = true; // help with collision\r\n    const updateNodes: GridStackWidget[] = [];\r\n    this.engine.nodes = this.engine.nodes.filter(n => {\r\n      if (Utils.find(items, n.id)) { updateNodes.push(n); return false; } // remove if found from list\r\n      return true;\r\n    });\r\n    items.forEach(w => {\r\n      const item = Utils.find(updateNodes, w.id);\r\n      if (item) {\r\n        // if item sizes to content, re-use the exiting height so it's a better guess at the final size (same if width doesn't change)\r\n        if (Utils.shouldSizeToContent(item)) w.h = item.h;\r\n        // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\r\n        this.engine.nodeBoundFix(w);\r\n        if (w.autoPosition || w.x === undefined || w.y === undefined) {\r\n          w.w = w.w || item.w;\r\n          w.h = w.h || item.h;\r\n          this.engine.findEmptyPosition(w);\r\n        }\r\n\r\n        // add back to current list BUT force a collision check if it 'appears' we didn't change to make sure we don't overlap others now\r\n        this.engine.nodes.push(item);\r\n        if (Utils.samePos(item, w) && this.engine.nodes.length > 1) {\r\n          this.moveNode(item, { ...w, forceCollide: true });\r\n          Utils.copyPos(w, item); // use possily updated values before update() is called next (no-op since already moved)\r\n        }\r\n\r\n        this.update(item.el, w);\r\n\r\n        if (w.subGridOpts?.children) { // update any sub grid as well\r\n          const sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    delete this.engine._loading; // done loading\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\r\n    // delay adding animation back\r\n    if (blank && this.opts?.animate) this.setAnimation(this.opts.animate, true);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._updateContainerHeight();\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n      (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // do rem/em/cm/mm to px conversion\r\n    if (this.opts.cellHeightUnit === 'rem') {\r\n      return (this.opts.cellHeight as number) * parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n    }\r\n    if (this.opts.cellHeightUnit === 'em') {\r\n      return (this.opts.cellHeight as number) * parseFloat(getComputedStyle(this.el).fontSize);\r\n    }\r\n    if (this.opts.cellHeightUnit === 'cm') {\r\n      // 1cm = 96px/2.54. See https://www.w3.org/TR/css-values-3/#absolute-lengths\r\n      return (this.opts.cellHeight as number) * (96 / 2.54);\r\n    }\r\n    if (this.opts.cellHeightUnit === 'mm') {\r\n      return (this.opts.cellHeight as number) * (96 / 2.54) / 10;\r\n    }\r\n    // else get first cell height\r\n    const el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      const h = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\r\n      return Math.round(el.offsetHeight / h);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    const rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      const marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    const data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    this.resizeToContentCheck();\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) , and optionally of window for dynamic column check */\r\n  protected _widthOrContainer(forBreakpoint = false): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return forBreakpoint && this.opts.columnOpts?.breakpointForWindow ? window.innerWidth : (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n  /** checks for dynamic column count for our current size, returning true if changed */\r\n  protected checkDynamicColumn(): boolean {\r\n    const resp = this.opts.columnOpts;\r\n    if (!resp || (!resp.columnWidth && !resp.breakpoints?.length)) return false;\r\n    const column = this.getColumn();\r\n    let newColumn = column;\r\n    const w = this._widthOrContainer(true);\r\n    if (resp.columnWidth) {\r\n      newColumn = Math.min(Math.round(w / resp.columnWidth) || 1, resp.columnMax);\r\n    } else {\r\n      // find the closest breakpoint (already sorted big to small) that matches\r\n      newColumn = resp.columnMax;\r\n      let i = 0;\r\n      while (i < resp.breakpoints.length && w <= resp.breakpoints[i].w) {\r\n        newColumn = resp.breakpoints[i++].c || column;\r\n      }\r\n    }\r\n    if (newColumn !== column) {\r\n      const bk = resp.breakpoints?.find(b => b.c === newColumn);\r\n      this.column(newColumn, bk?.layout || resp.layout);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * re-layout grid items to reclaim any empty space. Options are:\r\n   * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\r\n   * 'compact' might re-order items to fill any empty space\r\n   *\r\n   * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\r\n   */\r\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStack {\r\n    this.engine.compact(layout, doSort);\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (!column || column < 1 || this.opts.column === column) return this;\r\n\r\n    const oldColumn = this.getColumn();\r\n    this.opts.column = column;\r\n    if (!this.engine) return this; // called in constructor, noting else to do\r\n\r\n    this.engine.column = column;\r\n    this.el.classList.remove('gs-' + oldColumn);\r\n    this.el.classList.add('gs-' + column);\r\n\r\n    // update the items now, checking if we have a custom children layout\r\n    /*const newChildren = this.opts.columnOpts?.breakpoints?.find(r => r.c === column)?.children;\r\n    if (newChildren) this.load(newChildren);\r\n    else*/ this.engine.columnChanged(oldColumn, column, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    this.resizeToContentCheck(true); // wait for width resizing\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number { return this.opts.column as number; }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this.offAll();\r\n    this._updateResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n      this.el.removeAttribute('gs-current-row');\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    if (this.parentGridNode) delete this.parentGridNode.subGrid;\r\n    delete this.parentGridNode;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    const box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: { top: number, left: number };\r\n    if (useDocRelative) {\r\n      containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft }\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    const relativeLeft = position.left - containerPos.left;\r\n    const relativeTop = position.top - containerPos.top;\r\n\r\n    const columnWidth = (box.width / this.getColumn());\r\n    const rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   * @param options widget definition to use instead of reading attributes or using default sizing values\r\n   *\r\n   * @example\r\n   * const grid = GridStack.init();\r\n   * grid.el.innerHtml = '<div id=\"1\" gs-w=\"3\"></div><div id=\"2\"></div>';\r\n   * grid.makeWidget('1');\r\n   * grid.makeWidget('2', {w:2, content: 'hello'});\r\n   */\r\n  public makeWidget(els: GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    const el = GridStack.getElement(els);\r\n    if (!el) return;\r\n    if (!el.parentElement) this.el.appendChild(el);\r\n    this._prepareElement(el, true, options);\r\n    const node = el.gridstackNode;\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // see if there is a sub-grid to create\r\n    if (node.subGridOpts) {\r\n      this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: 'dropped', callback: GridStackDroppedHandler): GridStack\r\n  public on(name: 'enable' | 'disable', callback: GridStackEventHandler): GridStack\r\n  public on(name: 'change' | 'added' | 'removed' | 'resizecontent', callback: GridStackNodesHandler): GridStack\r\n  public on(name: 'resizestart' | 'resize' | 'resizestop' | 'dragstart' | 'drag' | 'dragstop', callback: GridStackElementHandler): GridStack\r\n  public on(name: string, callback: GridStackEventHandlerCallback): GridStack\r\n  public on(name: GridStackEvent | string, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      const names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      const noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => {if (event.detail) (callback as GridStackNodesHandler)(event, event.detail)};\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize'\r\n      || name === 'resizestop' || name === 'dropped' || name === 'resizecontent') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.error('GridStack.on(' + name + ') event not supported');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event GridStackEvent\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   */\r\n  public off(name: GridStackEvent | string): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      const names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /** remove all event handlers */\r\n  public offAll(): GridStack {\r\n    Object.keys(this._gsEventHandler).forEach((key: GridStackEvent) => this.off(key));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    if (!els) { console.error('Error: GridStack.removeWidget(undefined) called'); return this; }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      if (removeDOM && GridStack.addRemoveCB) {\r\n        GridStack.addRemoveCB(this.el, node, false, false);\r\n      }\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeAll(removeDOM = true, triggerEvent = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      if (removeDOM && GridStack.addRemoveCB) {\r\n        GridStack.addRemoveCB(this.el, n, false, false);\r\n      }\r\n      delete n.el.gridstackNode;\r\n      if (!this.opts.staticGrid) this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM, triggerEvent);\r\n    if (triggerEvent) this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   * @param delay if true setting will be set on next event loop.\r\n   */\r\n  public setAnimation(doAnimate = this.opts.animate, delay?: boolean): GridStack {\r\n    if (delay) {\r\n      // delay, but check to make sure grid (opt) is still around\r\n      setTimeout(() => { if (this.opts) this.setAnimation(doAnimate) });\r\n    } else if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private hasAnimationCSS(): boolean { return this.el.classList.contains('grid-stack-animate') }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (!!this.opts.staticGrid === val) return this;\r\n    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      const a = arguments;\r\n      let i = 1;\r\n      opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      const n = el?.gridstackNode;\r\n      if (!n) return;\r\n      const w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      this.engine.nodeBoundFix(w);\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      const keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content !== undefined) {\r\n        const itemContent = el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n        if (itemContent && itemContent.textContent !== w.content) {\r\n          n.content = w.content;\r\n          GridStack.renderCB(itemContent, w);\r\n          // restore any sub-grid back\r\n          if (n.subGrid?.el) {\r\n            itemContent.appendChild(n.subGrid.el);\r\n            if (!n.subGrid.opts.styleInHead) n.subGrid._updateStyles(true); // force create\r\n          }\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n      Utils.sanitizeMinMax(n);\r\n\r\n      // finally move the widget and update attr\r\n      if (m) {\r\n        const widthChanged = (m.w !== undefined && m.w !== n.w);\r\n        this.moveNode(n, m);\r\n        if (widthChanged && n.subGrid) {\r\n          // if we're animating the client size hasn't changed yet, so force a change (not exact size)\r\n          n.subGrid.onResize(this.hasAnimationCSS() ? n.w : undefined);\r\n        } else {\r\n          this.resizeToContentCheck(widthChanged, n);\r\n        }\r\n        delete n._orig; // clear out original position now that we moved #2669\r\n      }\r\n      if (m || changed) {\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  private moveNode(n: GridStackNode, m: GridStackMoveOpts) {\r\n    const wasUpdating = n._updating;\r\n    if (!wasUpdating) this.engine.cleanNodes().beginUpdate(n);\r\n    this.engine.moveNode(n, m);\r\n    this._updateContainerHeight();\r\n    if (!wasUpdating) {\r\n      this._triggerChangeEvent();\r\n      this.engine.endUpdate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates widget height to match the content height to avoid v-scrollbar or dead space.\r\n   * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\r\n   * @param el grid item element\r\n   * @param useNodeH set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\r\n   */\r\n  public resizeToContent(el: GridItemHTMLElement) {\r\n    if (!el) return;\r\n    el.classList.remove('size-to-content-max');\r\n    if (!el.clientHeight) return; // 0 when hidden, skip\r\n    const n = el.gridstackNode;\r\n    if (!n) return;\r\n    const grid = n.grid;\r\n    if (!grid || el.parentElement !== grid.el) return; // skip if we are not inside a grid\r\n    const cell = grid.getCellHeight(true);\r\n    if (!cell) return;\r\n    let height = n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\r\n    let item: Element;\r\n    if (n.resizeToContentParent) item = el.querySelector(n.resizeToContentParent);\r\n    if (!item) item = el.querySelector(GridStack.resizeToContentParent);\r\n    if (!item) return;\r\n    const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\r\n    const itemH = n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\r\n    let wantedH: number;\r\n    if (n.subGrid) {\r\n      // sub-grid - use their actual row count * their cell height, BUT append any content outside of the grid (eg: above text)\r\n      wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight(true);\r\n      const subRec = n.subGrid.el.getBoundingClientRect();\r\n      const parentRec = n.subGrid.el.parentElement.getBoundingClientRect();\r\n      wantedH += subRec.top - parentRec.top;\r\n    } else if (n.subGridOpts?.children?.length) {\r\n      // not sub-grid just yet (case above) wait until we do\r\n      return;\r\n    } else {\r\n      // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\r\n      const child = item.firstElementChild;\r\n      if (!child) {\r\n        console.error(`Error: GridStack.resizeToContent() widget id:${n.id} '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`);\r\n        return;\r\n      }\r\n      wantedH = child.getBoundingClientRect().height || itemH;\r\n    }\r\n    if (itemH === wantedH) return;\r\n    height += wantedH - itemH;\r\n    let h = Math.ceil(height / cell);\r\n    // check for min/max and special sizing\r\n    const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent as number : 0;\r\n    if (softMax && h > softMax) {\r\n      h = softMax;\r\n      el.classList.add('size-to-content-max');  // get v-scroll back\r\n    }\r\n    if (n.minH && h < n.minH) h = n.minH;\r\n    else if (n.maxH && h > n.maxH) h = n.maxH;\r\n    if (h !== n.h) {\r\n      grid._ignoreLayoutsNodeChange = true;\r\n      grid.moveNode(n, { h });\r\n      delete grid._ignoreLayoutsNodeChange;\r\n    }\r\n  }\r\n\r\n  /** call the user resize (so they can do extra work) else our build in version */\r\n  private resizeToContentCBCheck(el: GridItemHTMLElement) {\r\n    if (GridStack.resizeToContentCB) GridStack.resizeToContentCB(el);\r\n    else this.resizeToContent(el);\r\n  }\r\n\r\n  /** rotate (by swapping w & h) the passed in node - called when user press 'r' during dragging\r\n   * @param els  widget or selector of objects to modify\r\n   * @param relative optional pixel coord relative to upper/left corner to rotate around (will keep that cell under cursor)\r\n   */\r\n  public rotate(els: GridStackElement, relative?: Position): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      const n = el.gridstackNode;\r\n      if (!Utils.canBeRotated(n)) return;\r\n      const rot: GridStackWidget = { w: n.h, h: n.w, minH: n.minW, minW: n.minH, maxH: n.maxW, maxW: n.maxH };\r\n      // if given an offset, adjust x/y by column/row bounds when user presses 'r' during dragging\r\n      if (relative) {\r\n        const pivotX = relative.left > 0 ? Math.floor(relative.left / this.cellWidth()) : 0;\r\n        const pivotY = relative.top > 0 ? Math.floor(relative.top / (this.opts.cellHeight as number)) : 0;\r\n        rot.x = n.x + pivotX - (n.h - (pivotY+1));\r\n        rot.y = (n.y + pivotY) - pivotX;\r\n      }\r\n      Object.keys(rot).forEach(k => { if (rot[k] === undefined) delete rot[k]; });\r\n      const _orig = n._orig;\r\n      this.update(el, rot);\r\n      n._orig = _orig; // restore as move() will delete it\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    const isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      const data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      const a = arguments; let i = 0,\r\n        w: GridStackWidget = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    const elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes?.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      const addedNodes = [...this.engine.addedNodes];\r\n      this.engine.addedNodes = [];\r\n      this._triggerEvent('added', addedNodes);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes?.length) {\r\n      const removedNodes = [...this.engine.removedNodes];\r\n      this.engine.removedNodes = [];\r\n      this._triggerEvent('removed', removedNodes);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    const event = data ? new CustomEvent(type, { bubbles: false, detail: data }) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      const styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      Utils.removeStylesheet(this._styleSheetClass, styleLocation);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (maxH === undefined) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    const cellHeight = this.opts.cellHeight as number;\r\n    const cellHeightUnit = this.opts.cellHeightUnit;\r\n    const prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      const styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      const top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      const bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      const right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      const left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      const content = `${prefix} > .grid-stack-item-content`;\r\n      const placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-n`, `top: ${top};`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-s`, `bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}; top: ${top}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}; top: ${top}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      const getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i + 1}\"]`, `height: ${getHeight(i + 1)}`); // start at 2\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    const parent = this.parentGridNode;\r\n    let row = this.getRow() + this._extraDragRow; // this checks for minRow already\r\n    const cellHeight = this.opts.cellHeight as number;\r\n    const unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n\r\n    // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\r\n    if (!parent) {\r\n      const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)['minHeight']);\r\n      if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\r\n        const minRow = Math.floor(cssMinHeight.h / cellHeight);\r\n        if (row < minRow) {\r\n          row = minRow;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    this.el.style.removeProperty('min-height');\r\n    this.el.style.removeProperty('height');\r\n    if (row) {\r\n      // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\r\n      this.el.style[parent ? 'minHeight' : 'height'] = row * cellHeight + unit;\r\n    }\r\n\r\n    // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\r\n    if (parent && !parent.grid.engine.batchMode && Utils.shouldSizeToContent(parent)) {\r\n      parent.grid.resizeToContentCBCheck(parent.el);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n\r\n    // write the dom sizes and class\r\n    this._writeAttr(el, node);\r\n    el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n    const sizeToContent = Utils.shouldSizeToContent(node);\r\n    sizeToContent ? el.classList.add('size-to-content') : el.classList.remove('size-to-content');\r\n    if (sizeToContent) this.resizeToContentCheck(false, node);\r\n\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\r\n    n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    const attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      // autoPosition: 'gs-auto-position', // no need to write out as already in node and doesn't affect CSS\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      sizeToContent: 'gs-size-to-content',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement, clearDefaultAttr = true): GridStackWidget {\r\n    const n: GridStackNode = {};\r\n    n.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    n.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    n.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    n.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    n.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    n.sizeToContent = Utils.toBool(el.getAttribute('gs-size-to-content'));\r\n    n.id = el.getAttribute('gs-id');\r\n\r\n    // read but never written out\r\n    n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n\r\n    // v8.x optimization to reduce un-needed attr that don't render or are default CSS\r\n    if (clearDefaultAttr) {\r\n      if (n.w === 1) el.removeAttribute('gs-w');\r\n      if (n.h === 1) el.removeAttribute('gs-h');\r\n      if (n.maxW) el.removeAttribute('gs-max-w');\r\n      if (n.minW) el.removeAttribute('gs-min-w');\r\n      if (n.maxH) el.removeAttribute('gs-max-h');\r\n      if (n.minH) el.removeAttribute('gs-min-h');\r\n    }\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in n) {\r\n      if (!n.hasOwnProperty(key)) return;\r\n      if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete n[key];\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    const classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\r\n   * or `sizeToContent` gridItem options.\r\n   */\r\n  public onResize(clientWidth = this.el?.clientWidth): GridStack {\r\n    if (!clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    if (this.prevWidth === clientWidth) return; // no-op\r\n    this.prevWidth = clientWidth\r\n    // console.log('onResize ', clientWidth);\r\n\r\n    this.batchUpdate();\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    let columnChanged = false;\r\n    if (this._autoColumn && this.parentGridNode) {\r\n      if (this.opts.column !== this.parentGridNode.w) {\r\n        this.column(this.parentGridNode.w, this.opts.layout || 'list');\r\n        columnChanged = true;\r\n      }\r\n    } else {\r\n      // else check for dynamic column\r\n      columnChanged = this.checkDynamicColumn();\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // update any nested grids, or items size\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) n.subGrid.onResize()\r\n    });\r\n\r\n    if (!this._skipInitialResize) this.resizeToContentCheck(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\r\n    delete this._skipInitialResize;\r\n\r\n    this.batchUpdate(false);\r\n\r\n    return this;\r\n  }\r\n\r\n  /** resizes content for given node (or all) if shouldSizeToContent() is true */\r\n  private resizeToContentCheck(delay = false, n: GridStackNode = undefined) {\r\n    if (!this.engine) return; // we've been deleted in between!\r\n\r\n    // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\r\n    // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\r\n    if (delay && this.hasAnimationCSS()) return setTimeout(() => this.resizeToContentCheck(false, n), this.animationDelay);\r\n\r\n    if (n) {\r\n      if (Utils.shouldSizeToContent(n)) this.resizeToContentCBCheck(n.el);\r\n    } else if (this.engine.nodes.some(n => Utils.shouldSizeToContent(n))) {\r\n      const nodes = [...this.engine.nodes]; // in case order changes while resizing one\r\n      this.batchUpdate();\r\n      nodes.forEach(n => {\r\n        if (Utils.shouldSizeToContent(n)) this.resizeToContentCBCheck(n.el);\r\n      });\r\n      this.batchUpdate(false);\r\n    }\r\n    // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\r\n    if (this._gsEventHandler['resizecontent']) this._gsEventHandler['resizecontent'](null, n ? [n] : this.engine.nodes);\r\n  }\r\n\r\n  /** add or remove the grid element size event handler */\r\n  protected _updateResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting dynamic column (i.e. doing work)\r\n    // or supporting new sizeToContent option.\r\n    const trackSize = !this.parentGridNode && (this._isAutoCellHeight || this.opts.sizeToContent || this.opts.columnOpts\r\n      || this.engine.nodes.find(n => n.sizeToContent));\r\n\r\n    if (!forceRemove && trackSize && !this.resizeObserver) {\r\n      this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);\r\n      this.resizeObserver = new ResizeObserver(() => this._sizeThrottle());\r\n      this.resizeObserver.observe(this.el);\r\n      this._skipInitialResize = true; // makeWidget will originally have called on startup\r\n    } else if ((forceRemove || !trackSize) && this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n      delete this.resizeObserver;\r\n      delete this._sizeThrottle;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '11.1.2';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar-item') or list of dom elements\r\n   * @param dragInOptions options - see DDDragOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   * @param widgets GridStackWidget def to assign to each element which defines what to create on drop\r\n   * @param root optional root which defaults to document (for shadow dom pass the parent HTMLDocument)\r\n   */\r\n  public static setupDragIn(dragIn?: string | HTMLElement[], dragInOptions?: DDDragOpt, widgets?: GridStackWidget[], root: HTMLElement | Document = document): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    dragInOptions = { appendTo: 'body', helper: 'clone', ...(dragInOptions || {}) }; // default to handle:undefined = drag by the whole item\r\n    const els = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\r\n    els.forEach((el, i) => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n      if (widgets?.[i]) (el as GridItemHTMLElement).gridstackNode = widgets[i];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      const n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noMove : n.noMove = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      const n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noResize : n.noResize = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    const onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      helper = helper || el;\r\n      const node = helper.gridstackNode;\r\n      if (!node) return;\r\n\r\n      // if the element is being dragged from outside, scale it down to match the grid's scale\r\n      // and slightly adjust its position relative to the mouse\r\n      if (!node.grid?.el) {\r\n        // this scales the helper down\r\n        helper.style.transform = `scale(${1 / this.dragTransform.xScale},${1 / this.dragTransform.yScale})`;\r\n        // this makes it so that the helper is well positioned relative to the mouse after scaling\r\n        const helperRect = helper.getBoundingClientRect();\r\n        helper.style.left = helperRect.x + (this.dragTransform.xScale - 1) * (event.clientX - helperRect.x) / this.dragTransform.xScale + 'px';\r\n        helper.style.top = helperRect.y + (this.dragTransform.yScale - 1) * (event.clientY - helperRect.y) / this.dragTransform.yScale + 'px';\r\n        helper.style.transformOrigin = `0px 0px`\r\n      }\r\n\r\n      let { top, left } = helper.getBoundingClientRect();\r\n      const rect = this.el.getBoundingClientRect();\r\n      left -= rect.left;\r\n      top -= rect.top;\r\n      const ui: DDUIData = {\r\n        position: {\r\n          top: top * this.dragTransform.xScale,\r\n          left: left * this.dragTransform.yScale\r\n        }\r\n      };\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        const node: GridStackNode = el.gridstackNode || this._readAttr(el, false);\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          const selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571 #2633\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          const n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH }; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n      /**\r\n       * entering our grid area\r\n       */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = helper?.gridstackNode || el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n          // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n          // console.log('dropover without leave'); // TEST\r\n          const otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n        helper = helper || el;\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // sidebar items: load any element attributes if we don't have a node\r\n        if (!node) {\r\n          if (helper.hasAttribute('gridstacknode')) {\r\n            try {\r\n              node = JSON.parse(helper.getAttribute('gridstacknode'));\r\n            } catch (error) {\r\n              console.error(\"Gridstack dropover: Bad JSON format: \", helper.getAttribute('gridstacknode'));\r\n            }\r\n            helper.removeAttribute('gridstacknode');\r\n          }\r\n          if (!node) node = this._readAttr(helper); // used to pass false for #2354, but now we clone top level node\r\n        }\r\n        if (!node.grid) { // sidebar item\r\n          if (!node.el) node = {...node}; // clone first time we're coming from sidebar (since 'clone' doesn't copy vars)\r\n          node._isExternal = true;\r\n          helper.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        const w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        const h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n          // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n          // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = { ...node, w, h, grid: this };\r\n          delete node.x;\r\n          delete node.y;\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n            node._isExternal =  // DOM needs to be re-parented on a drop\r\n            node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w;\r\n          node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        GridStack._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n      /**\r\n       * Leaving our grid area...\r\n       */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        const node = helper?.gridstackNode || el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n      /**\r\n       * end - releasing the mouse\r\n       */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        const node = helper?.gridstackNode || el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        const wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        const wasSidebar = el !== helper;\r\n        this.placeholder.remove();\r\n\r\n        // disable animation when replacing a placeholder (already positioned) with actual content\r\n        const noAnim = wasAdded && this.opts.animate;\r\n        if (noAnim) this.setAnimation(false);\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        const origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          const oGrid = origNode.grid;\r\n          oGrid.engine.removeNodeFromLayoutCache(origNode);\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridNode && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        delete node.grid?._isTemp;\r\n        dd.off(el, 'drag');\r\n        // if we made a copy insert that instead of the original (sidebar item)\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el = helper;\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n        }\r\n        this._removeDD(el);\r\n        if (!wasAdded) return false;\r\n        const subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);\r\n\r\n        // give the user a chance to alter the widget that will get inserted if new sidebar item\r\n        if (wasSidebar && (node.content || node.subGridOpts || GridStack.addRemoveCB)) {\r\n          delete node.el;\r\n          el = this.addWidget(node);\r\n        } else {\r\n          this._prepareElement(el, true, node);\r\n          this.el.appendChild(el);\r\n          // resizeToContent is skipped in _prepareElement() until node is visible (clientHeight=0) so call it now\r\n          this.resizeToContentCheck(false, node);\r\n          if (subGrid) {\r\n            subGrid.parentGridNode = node;\r\n            if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n          }\r\n          this._updateContainerHeight();\r\n        }\r\n        this.engine.addedNodes.push(node);\r\n        this._triggerAddEvent();\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({ ...event, type: 'dropped' }, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // delay adding animation back\r\n        if (noAnim) this.setAnimation(this.opts.animate, true);\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private static _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    if (!el) return;\r\n    const node = el ? el.gridstackNode : undefined;\r\n    if (!node?.grid || el.classList.contains(node.grid.opts.removableOptions.decline)) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (typeof this.opts.removable !== 'string') return this;\r\n    const trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n\r\n    // only register ONE static drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the '.trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!this.opts.staticGrid && !dd.isDroppable(trashEl)) {\r\n      dd.droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => GridStack._itemRemoving(el, true))\r\n        .on(trashEl, 'dropout', (event, el) => GridStack._itemRemoving(el, false));\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop */\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    const el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      const onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      const dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      const onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n        const widthChanged = node.w !== node._orig.w;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        const target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          const grid = el.gridstackNode.grid;\r\n          if (grid._gsEventHandler[event.type]) {\r\n            grid._gsEventHandler[event.type](event, target);\r\n          }\r\n          grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\r\n          grid.removeWidget(el, true, true);\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n\r\n        if (event.type === 'resizestop') {\r\n          if (Number.isInteger(node.sizeToContent)) node.sizeToContent = node.h; // new soft limit\r\n          this.resizeToContentCheck(widthChanged, node); // wait for width animation if changed\r\n        }\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start */\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    this.placeholder.gridstackNode = node;\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    // if the element is inside a grid, it has already been scaled\r\n    // we can use that as a scale reference\r\n    if (node.grid?.el) {\r\n      this.dragTransform = Utils.getValuesFromTransformedElement(el);\r\n    }\r\n    // if the element is being dragged from outside (not from any grid)\r\n    // we use the grid as the transformation reference, since the helper is not subject to transformation\r\n    else if (this.placeholder && this.placeholder.closest('.grid-stack')) {\r\n      const gridEl = this.placeholder.closest('.grid-stack') as HTMLElement;\r\n      this.dragTransform = Utils.getValuesFromTransformedElement(gridEl);\r\n    }\r\n    // Fallback\r\n    else {\r\n      this.dragTransform = {\r\n        xScale: 1,\r\n        xOffset: 0,\r\n        yScale: 1,\r\n        yOffset: 0,\r\n      }\r\n    }\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info taking into account the column count and position (so we don't resize outside the grid)\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      const colLeft = this.getColumn() - node.x;\r\n      const rowLeft = (this.opts.maxRow || Number.MAX_SAFE_INTEGER) - node.y;\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * Math.min(node.minW || 1, colLeft))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * Math.min(node.minH || 1, rowLeft))\r\n        .resizable(el, 'option', 'maxWidth', cellWidth * Math.min(node.maxW || Number.MAX_SAFE_INTEGER, colLeft))\r\n        .resizable(el, 'option', 'maxWidthMoveLeft', cellWidth * Math.min(node.maxW || Number.MAX_SAFE_INTEGER, node.x+node.w))\r\n        .resizable(el, 'option', 'maxHeight', cellHeight * Math.min(node.maxH || Number.MAX_SAFE_INTEGER, rowLeft))\r\n        .resizable(el, 'option', 'maxHeightMoveUp', cellHeight * Math.min(node.maxH || Number.MAX_SAFE_INTEGER, node.y+node.h));\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize */\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    const p = { ...node._orig }; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    const mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      const distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      const left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);\r\n      const top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      const prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        const row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize') {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      const left = ui.position.left + mLeft;\r\n      const top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    const rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, { ...p, cellWidth, cellHeight, rect, resizing })) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) node.subGrid.onResize();\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      const target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   */\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    helper = helper || el;\r\n    const node = helper.gridstackNode;\r\n    if (!node) return;\r\n\r\n    // remove the scale of the helper on leave\r\n    helper.style.transform = helper.style.transformOrigin = null;\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n    if (node._isExternal) this.engine.cleanupNode(node);\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      GridStack._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * dd-gridstack.ts 11.1.2\r\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight' | 'maxHeightMoveUp' | 'maxWidthMoveLeft';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const n = dEl.el.gridstackNode;\r\n        const grid = n.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') || grid.opts.resizable.handles || 'e,s,se';\r\n        if (handles === 'all') handles = 'n,e,s,w,se,sw,ne,nw';\r\n        // NOTE: keep the resize handles as e,w don't have enough space (10px) to show resize corners anyway. limit during drag instead\r\n        // restrict vertical resize if height is done to match content anyway... odd to have it spring back\r\n        // if (Utils.shouldSizeToContent(n, true)) {\r\n        //   const doE = handles.indexOf('e') !== -1;\r\n        //   const doW = handles.indexOf('w') !== -1;\r\n        //   handles = doE ? (doW ? 'e,w' : 'e') : (doW ? 'w' : '');\r\n        // }\r\n        const autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridNode && grid.opts.dragOut === false) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el?.ddElement?.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el?.ddElement?.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el?.ddElement?.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    const hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    const list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Utils","getElements","els","document","doc","undefined","isNaN","el","getElementById","list","querySelectorAll","length","Array","from","getElement","substring","querySelector","createWidgetDivs","itemClass","n","createDiv","cont","lazyLoad","grid","opts","visibleObservable","IntersectionObserver","entry","isIntersecting","disconnect","GridStack","renderCB","window","setTimeout","observe","classes","parent","createElement","forEach","c","classList","add","appendChild","shouldSizeToContent","strict","sizeToContent","isIntercepted","a","b","y","h","x","w","isTouching","areaIntercept","x0","x1","y0","y1","area","sort","nodes","dir","und","diffY","find","id","createStylesheet","options","style","nonce","setAttribute","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","removeStylesheet","parentNode","remove","addCSSRule","selector","rules","addRule","insertRule","toBool","v","toLowerCase","Boolean","toNumber","value","Number","parseHeight","val","unit","match","Error","parseFloat","defaults","target","sources","source","this","same","keys","copyPos","doMinMax","minW","minH","maxW","maxH","samePos","sanitizeMinMax","node","removeInternalAndSame","aVal","bVal","removeInternalForSave","removeEl","autoPosition","noResize","noMove","locked","throttle","func","delay","isWaiting","args","removePositioningStyles","position","removeProperty","left","top","width","height","getScrollElement","scrollingElement","documentElement","getComputedStyle","test","overflow","overflowY","parentElement","updateScrollPosition","distance","rect","getBoundingClientRect","innerHeightOrClientHeight","innerHeight","clientHeight","bottom","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","scrollTop","offsetHeight","Math","abs","updateScrollResize","event","offsetTop","pointerPosY","clientY","scrollBy","behavior","clone","cloneDeep","skipFields","ret","k","cloneNode","removeAttribute","appendTo","addElStyles","styles","s","isArray","initEvent","e","info","evt","type","button","which","buttons","bubbles","cancelable","p","simulateMouseEvent","simulatedType","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","ctrlKey","altKey","shiftKey","metaKey","dispatchEvent","getValuesFromTransformedElement","transformReference","opacity","zIndex","transformValues","removeChild","xScale","yScale","xOffset","yOffset","swap","tmp","canBeRotated","disableResize","GridStackEngine","addedNodes","removedNodes","defaultColumn","column","maxRow","_float","float","onChange","batchUpdate","flag","doPack","batchMode","_prevFloat","cleanNodes","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","_loading","skip","didMove","newOpt","pack","counter","moved","newNN","moveNode","skip2","skipId","_id","skip2Id","collideAll","filter","directionCollideCoverage","collides","_rect","r0","r","overMax","r2","yOver","MAX_VALUE","xOver","over","min","cacheRects","right","_doSwap","_dirty","touching","t","isAreaEmpty","compact","layout","doSort","wasBatch","wasColumnResize","_inColumnResize","copyNodes","index","after","addNode","_updating","_orig","newY","i","prepareNode","resizing","_idSeq","count","nodeBoundFix","before","max","findCacheLayout","copy","cacheOneLayout","getDirtyNodes","verify","dirtyNodes","concat","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","dup","skipCollision","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","triggerEvent","_isAboutToRemove","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","map","canMove","getRow","gridstackNode","willItFit","_willFitPos","cleanupNode","content","wasUndefinedPack","forceCollide","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","a1","a2","makeSubGrid","reduce","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","wl","l","layoutsNodesChange","ratio","round","columnChanged","prevColumn","doCompact","cacheLayout","newNodes","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","existing","n2","removeNodeFromLayoutCache","gridDefaults","alwaysShowResizeHandle","animate","auto","cellHeight","cellHeightThrottle","cellHeightUnit","draggable","handle","scroll","margin","marginUnit","minRow","placeholderClass","placeholderText","removableOptions","accept","decline","resizable","handles","rtl","DDManager","isTouch","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","touches","preventDefault","touch","changedTouches","simulatePointerMouseEvent","touchstart","touchHandled","touchmove","touchend","pointerLeaveTimeout","clearTimeout","wasDragging","dragElement","pointerdown","pointerType","releasePointerCapture","pointerId","pointerenter","pointerleave","DDResizableHandle","constructor","host","option","moving","_mouseDown","bind","_mouseMove","_mouseUp","_keyEvent","_init","prefix","userSelect","addEventListener","destroy","mouseDownEvent","removeEventListener","capture","passive","stopPropagation","_triggerEvent","engine","name","DDBaseImplement","_eventRegister","disabled","_disabled","on","callback","off","enable","disable","eventName","DDResizable","super","rectScale","_ui","containmentRect","newRect","originalRect","scrolled","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","autoHide","_setupHandlers","_removeHandlers","updateOption","updateHandles","updateAutoHide","overResizeElement","handlers","split","trim","start","_resizeStart","stop","_resizeStop","_resizing","scrollY","startEvent","_setupHelper","_applyChange","ev","_getChange","resize","_cleanHelper","elOriginStyleVal","_originStyleProp","parentOriginStylePosition","dragTransform","oEvent","offsetX","offsetY","moveLeft","moveUp","indexOf","constrain","_constrainSize","oWidth","oHeight","maxWidth","maxWidthMoveLeft","MAX_SAFE_INTEGER","minWidth","maxHeight","maxHeightMoveUp","minHeight","containmentEl","scaleReciprocal","DDDraggable","handleName","dragEls","contains","subGrid","dragEl","forDestroy","dragTimeout","helper","mouseHandled","closest","cancel","dragging","dropElement","currentTarget","activeElement","blur","_callDrag","drag","ui","lastDrag","_dragFollow","pauseDrag","pause","isInteger","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","helperContainment","dragOffset","_getDragOffset","_setupHelperStyle","_origRotate","_removeHelperStyle","drop","setAnimation","rotate","offsetLeft","body","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","offset","xformOffsetX","xformOffsetY","targetOffset","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","_canDrop","calledByEnter","out","parentDrop","matches","DDElement","init","ddDraggable","ddResizable","setupDraggable","cleanDraggable","setupResizable","cleanResizable","setupDroppable","cleanDroppable","dd","_getDDElements","dEl","getAttribute","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","create","hosts","d","elOrString","getGridElement","gridstack","console","error","initAll","grids","getGridElements","addGrid","children","load","addRemoveCB","class","registerEngine","engineClass","placeholder","_placeholder","placeholderChild","className","textContent","animationDelay","_gsEventHandler","_extraDragRow","rowAttr","_alwaysShowResizeHandle","bk","columnOpts","breakpoints","oldOpts","oneColumnModeDomSort","log","oneColumnSize","disableOneColumnMode","oneSize","oneColumn","resp","columnWidth","columnMax","staticGrid","handleClass","_initMargin","checkDynamicColumn","direction","parentGridItem","parentGridNode","_isAutoCellHeight","_styleSheetClass","_setStaticClass","getColumn","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","_setupRemoveDrop","_setupAcceptWidget","_updateResizeEvent","addWidget","ELEMENT_NODE","makeWidget","domAttr","_readAttr","ops","nodeToAdd","saveContent","subGridTemplate","autoColumn","subGridOpts","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","_autoColumn","_event","resizeToContentCheck","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","itemContent","innerHTML","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","origShow","items","addRemove","maxColumn","_ignoreLayoutsNodeChange","prevCB","removed","blank","updateNodes","item","sub","_updateContainerHeight","_triggerRemoveEvent","_triggerAddEvent","_triggerChangeEvent","getCellHeight","forcePixel","fontSize","rows","parseInt","marginDiff","cellWidth","data","_widthOrContainer","forBreakpoint","breakpointForWindow","innerWidth","clientWidth","newColumn","oldColumn","offAll","setStatic","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","relativeLeft","relativeTop","rowHeight","noData","detail","doAnimate","hasAnimationCSS","updateClass","recurse","arguments","warn","m","styleInHead","changed","ddChanged","widthChanged","onResize","_writeAttr","wasUpdating","resizeToContent","cell","resizeToContentParent","padding","itemH","wantedH","subRec","parentRec","child","firstElementChild","ceil","softMax","resizeToContentCBCheck","resizeToContentCB","relative","rot","pivotX","pivotY","getMargin","elements","CustomEvent","Event","_styles","styleLocation","forceUpdate","_max","getHeight","cssMinHeight","String","attrs","clearDefaultAttr","prevWidth","_skipInitialResize","forceRemove","trackSize","resizeObserver","_sizeThrottle","ResizeObserver","margins","getDD","setupDragIn","dragInOptions","widgets","movable","enableMove","enableResize","doEnable","disableDrag","_initDD","acceptWidgets","removable","onDrag","transform","helperRect","transformOrigin","_onStartMoving","_dragOrResize","canAccept","_leave","hasAttribute","JSON","parse","_isExternal","offsetWidth","_gridstackNodeOrig","_itemRemoving","wasAdded","wasSidebar","noAnim","origNode","oGrid","trashEl","onStartMoving","dragOrResize","onEndMoving","gridEl","_lastUiPosition","_prevYPix","colLeft","rowLeft","mLeft","mRight","mTop","mBottom","mHeight","mWidth","prev","extra","commit","Engine","GDRev"],"sourceRoot":""}